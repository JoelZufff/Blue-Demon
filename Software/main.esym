D G "__PCH__" 0 81 ""5.112""
D G "__DEVICE__" 0 81 "2622"
D G "__DATE__" 0 81 ""23-Mar-24""
D G "__TIME__" 0 81 ""21:58:51""
D G "_UNICODE" 0 81 ""?""
D G "__EVAL" 0 81 ""?"" "--------------- Preprocesadores de microcontrolador -------------- //"
c L "set_tris_a" 1 1 6 "FUNCTION"
F N "set_tris_a" 1 45 ""
V L "value" 1 45 "int8" `55 
F B "set_tris_a" 1 45 "void(int8 value)" `54 
F N "set_tris_b" 1 46 ""
V L "value" 1 46 "int8" `57 
F B "set_tris_b" 1 46 "void(int8 value)" `56 
F N "set_tris_c" 1 47 ""
V L "value" 1 47 "int8" `59 
F B "set_tris_c" 1 47 "void(int8 value)" `58 
F N "set_tris_e" 1 48 ""
V L "value" 1 48 "int8" `61 
F B "set_tris_e" 1 48 "void(int8 value)" `60 
F N "get_tris_a" 1 49 ""
F B "get_tris_a" 1 49 "int8()" `62 
F N "get_tris_b" 1 50 ""
F B "get_tris_b" 1 50 "int8()" `63 
F N "get_tris_c" 1 51 ""
F B "get_tris_c" 1 51 "int8()" `64 
F N "get_tris_e" 1 52 ""
F B "get_tris_e" 1 52 "int8()" `65 
F N "output_a" 1 53 ""
V L "value" 1 53 "int8" `67 
F B "output_a" 1 53 "void(int8 value)" `66 
F N "output_b" 1 54 ""
V L "value" 1 54 "int8" `69 
F B "output_b" 1 54 "void(int8 value)" `68 
F N "output_c" 1 55 ""
V L "value" 1 55 "int8" `71 
F B "output_c" 1 55 "void(int8 value)" `70 
F N "output_e" 1 56 ""
V L "value" 1 56 "int8" `73 
F B "output_e" 1 56 "void(int8 value)" `72 
F N "input_a" 1 57 ""
F B "input_a" 1 57 "int8()" `74 
F N "input_b" 1 58 ""
F B "input_b" 1 58 "int8()" `75 
F N "input_c" 1 59 ""
F B "input_c" 1 59 "int8()" `76 
F N "input_e" 1 60 ""
F B "input_e" 1 60 "int8()" `77 
F N "input_change_a" 1 61 ""
F B "input_change_a" 1 61 "int8()" `78 
F N "input_change_b" 1 62 ""
F B "input_change_b" 1 62 "int8()" `79 
F N "input_change_c" 1 63 ""
F B "input_change_c" 1 63 "int8()" `80 
F N "input_change_e" 1 64 ""
F B "input_change_e" 1 64 "int8()" `81 
F N "port_b_pullups" 1 65 ""
V L "upmask" 1 65 "int8" `83 
F B "port_b_pullups" 1 65 "void(int8 upmask)" `82 
F N "port_e_pullups" 1 66 ""
V L "value" 1 66 "int8" `85 
F B "port_e_pullups" 1 66 "void(int8 value)" `84 
F N "set_slow_slew_a" 1 67 ""
V L "value" 1 67 "int8" `87 
F B "set_slow_slew_a" 1 67 "void(int8 value)" `86 
F N "set_slow_slew_b" 1 68 ""
V L "value" 1 68 "int8" `89 
F B "set_slow_slew_b" 1 68 "void(int8 value)" `88 
F N "set_slow_slew_c" 1 69 ""
V L "value" 1 69 "int8" `91 
F B "set_slow_slew_c" 1 69 "void(int8 value)" `90 
F N "set_slow_slew_e" 1 70 ""
V L "value" 1 70 "int8" `93 
F B "set_slow_slew_e" 1 70 "void(int8 value)" `92 
F N "input" 1 71 ""
V L "pin" 1 71 "int16" `95 
F B "input" 1 71 "int8(int16 pin)" `94 
F N "input_state" 1 72 ""
V L "pin" 1 72 "int16" `97 
F B "input_state" 1 72 "int8(int16 pin)" `96 
F N "output_low" 1 73 ""
V L "pin" 1 73 "int16" `99 
F B "output_low" 1 73 "void(int16 pin)" `98 
F N "output_high" 1 74 ""
V L "pin" 1 74 "int16" `101 
F B "output_high" 1 74 "void(int16 pin)" `100 
F N "output_toggle" 1 75 ""
V L "pin" 1 75 "int16" `103 
F B "output_toggle" 1 75 "void(int16 pin)" `102 
F N "output_bit" 1 76 ""
V L "pin" 1 76 "int16" `105 
V L "level" 1 76 "int8" `106 
F B "output_bit" 1 76 "void(int16 pin,int8 level)" `104 
F N "output_float" 1 77 ""
V L "pin" 1 77 "int16" `108 
F B "output_float" 1 77 "void(int16 pin)" `107 
F N "output_drive" 1 78 ""
V L "pin" 1 78 "int16" `110 
F B "output_drive" 1 78 "void(int16 pin)" `109  "Constants used to identify pins in the above are:"
D G "PIN_A0" 1 82 "31744"
D G "PIN_A1" 1 83 "31745"
D G "PIN_A2" 1 84 "31746"
D G "PIN_A3" 1 85 "31747"
D G "PIN_A4" 1 86 "31748"
D G "PIN_A5" 1 87 "31749"
D G "PIN_A6" 1 88 "31750"
D G "PIN_A7" 1 89 "31751"
D G "PIN_B0" 1 91 "31752"
D G "PIN_B1" 1 92 "31753"
D G "PIN_B2" 1 93 "31754"
D G "PIN_B3" 1 94 "31755"
D G "PIN_B4" 1 95 "31756"
D G "PIN_B5" 1 96 "31757"
D G "PIN_B6" 1 97 "31758"
D G "PIN_B7" 1 98 "31759"
D G "PIN_C0" 1 100 "31760"
D G "PIN_C1" 1 101 "31761"
D G "PIN_C2" 1 102 "31762"
D G "PIN_C3" 1 103 "31763"
D G "PIN_C4" 1 104 "31764"
D G "PIN_C5" 1 105 "31765"
D G "PIN_C6" 1 106 "31766"
D G "PIN_C7" 1 107 "31767"
D G "PIN_E3" 1 109 "31779"
D G "FALSE" 1 112 "0"
D G "TRUE" 1 113 "1"
D G "BYTE" 1 115 "int8"
D G "BOOLEAN" 1 116 "int1"
D G "getc" 1 118 "getch"
D G "fgetc" 1 119 "getch"
D G "getchar" 1 120 "getch"
D G "putc" 1 121 "putchar"
D G "fputc" 1 122 "putchar"
D G "fgets" 1 123 "gets"
D G "fputs" 1 124 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
F N "restart_cause" 1 129 ""
F B "restart_cause" 1 129 "int8()" `111 
F N "reset_cpu" 1 130 ""
F B "reset_cpu" 1 130 "void()" `112 
F N "sleep" 1 131 ""
F B "sleep" 1 131 "void()" `113 
F N "sleep" 1 132 ""
V L "type" 1 132 "int8" `115 
F B "sleep" 1 132 "void(int8 type)" `114  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_TIMEOUT" 1 134 "7"
D G "MCLR_FROM_SLEEP" 1 135 "11"
D G "MCLR_FROM_RUN" 1 136 "15"
D G "NORMAL_POWER_UP" 1 137 "12"
D G "BROWNOUT_RESTART" 1 138 "14"
D G "WDT_FROM_SLEEP" 1 139 "3"
D G "RESET_INSTRUCTION" 1 140 "0"
D G "SLEEP_FULL" 1 143 "0" "Default"
D G "SLEEP_IDLE" 1 144 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 5 "FUNCTION"
F N "setup_timer_0" 1 151 ""
V L "mode" 1 151 "int8" `117 
F B "setup_timer_0" 1 151 "void(int8 mode)" `116 
F N "set_timer0" 1 152 ""
V L "value" 1 152 "int16" `119 
F B "set_timer0" 1 152 "void(int16 value)" `118 
F N "get_timer0" 1 153 ""
F B "get_timer0" 1 153 "int16()" `120 
F N "setup_counters" 1 154 ""
V L "mode" 1 154 "int8" `122 
V L "prescaler" 1 154 "int8" `123 
F B "setup_counters" 1 154 "void(int8 mode,int8 prescaler)" `121 
F N "set_rtcc" 1 155 ""
V L "value" 1 155 "int16" `125 
F B "set_rtcc" 1 155 "void(int16 value)" `124 
F N "get_rtcc" 1 156 ""
F B "get_rtcc" 1 156 "int16()" `126  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 1 158 "0"
D G "T0_EXT_L_TO_H" 1 159 "32"
D G "T0_EXT_H_TO_L" 1 160 "48"
D G "T0_DIV_1" 1 162 "8"
D G "T0_DIV_2" 1 163 "0"
D G "T0_DIV_4" 1 164 "1"
D G "T0_DIV_8" 1 165 "2"
D G "T0_DIV_16" 1 166 "3"
D G "T0_DIV_32" 1 167 "4"
D G "T0_DIV_64" 1 168 "5"
D G "T0_DIV_128" 1 169 "6"
D G "T0_DIV_256" 1 170 "7"
D G "T0_OFF" 1 172 "0x80"
D G "T0_8_BIT" 1 174 "0x40"
D G "RTCC_INTERNAL" 1 178 "0"
D G "RTCC_EXT_L_TO_H" 1 179 "32"
D G "RTCC_EXT_H_TO_L" 1 180 "48"
D G "RTCC_DIV_1" 1 181 "8"
D G "RTCC_DIV_2" 1 182 "0"
D G "RTCC_DIV_4" 1 183 "1"
D G "RTCC_DIV_8" 1 184 "2"
D G "RTCC_DIV_16" 1 185 "3"
D G "RTCC_DIV_32" 1 186 "4"
D G "RTCC_DIV_64" 1 187 "5"
D G "RTCC_DIV_128" 1 188 "6"
D G "RTCC_DIV_256" 1 189 "7"
D G "RTCC_OFF" 1 190 "0x80"
D G "RTCC_8_BIT" 1 191 "0x40"
c L "get_rtcc" 1 1 8 "FUNCTION"
F N "setup_wdt" 1 202 ""
V L "mode" 1 202 "int16" `128 
F B "setup_wdt" 1 202 "void(int16 mode)" `127 
F N "restart_wdt" 1 203 ""
F B "restart_wdt" 1 203 "void()" `129  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 1 205 "0x100"
D G "WDT_OFF" 1 206 "0"
D G "WDT_4MS" 1 208 "0x300"
D G "WDT_8MS" 1 209 "0x500"
D G "WDT_16MS" 1 210 "0x700"
D G "WDT_32MS" 1 211 "0x900"
D G "WDT_64MS" 1 212 "0xB00"
D G "WDT_128MS" 1 213 "0xD00"
D G "WDT_256MS" 1 214 "0xF00"
D G "WDT_512MS" 1 215 "0x1100"
D G "WDT_1S" 1 216 "0x1300"
D G "WDT_2S" 1 217 "0x1500"
D G "WDT_4S" 1 218 "0x1700"
D G "WDT_8S" 1 219 "0x1900"
D G "WDT_16S" 1 220 "0x1B00"
D G "WDT_32S" 1 221 "0x1D00"
D G "WDT_64S" 1 222 "0x1F00"
D G "WDT_128S" 1 223 "0x2100"
c L "restart_wdt" 1 1 3 "FUNCTION"
F N "setup_timer_1" 1 228 ""
V L "mode" 1 228 "int16" `131 
F B "setup_timer_1" 1 228 "void(int16 mode)" `130 
F N "get_timer1" 1 229 ""
F B "get_timer1" 1 229 "int16()" `132 
F N "set_timer1" 1 230 ""
V L "value" 1 230 "int16" `134 
F B "set_timer1" 1 230 "void(int16 value)" `133  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 1 233 "0"
D G "T1_INTERNAL" 1 234 "0x07"
D G "T1_EXTERNAL" 1 235 "0x87"
D G "T1_EXTERNAL_SYNC" 1 236 "0x83"
D G "T1_FOSC" 1 237 "0x47"
D G "T1_ENABLE_SOSC" 1 239 "0x08"
D G "T1_DIV_BY_1" 1 241 "0"
D G "T1_DIV_BY_2" 1 242 "0x10"
D G "T1_DIV_BY_4" 1 243 "0x20"
D G "T1_DIV_BY_8" 1 244 "0x30"
D G "T1_GATE" 1 246 "0x8000"
D G "T1_GATE_INVERTED" 1 247 "0xC000"
D G "T1_GATE_TOGGLE" 1 248 "0xA000"
D G "T1_GATE_SINGLE" 1 249 "0x9000"
D G "T1_GATE_TIMER2" 1 250 "0x8100"
D G "T1_GATE_COMP1" 1 251 "0x8200"
D G "T1_GATE_COMP2" 1 252 "0x8300"
c L "set_timer1" 1 1 3 "FUNCTION"
F N "setup_timer_2" 1 257 ""
V L "mode" 1 257 "int8" `136 
V L "period" 1 257 "int8" `137 
V L "postscale" 1 257 "int8" `138 
F B "setup_timer_2" 1 257 "void(int8 mode,int8 period,int8 postscale)" `135 
F N "get_timer2" 1 258 ""
F B "get_timer2" 1 258 "int8()" `139 
F N "set_timer2" 1 259 ""
V L "value" 1 259 "int8" `141 
F B "set_timer2" 1 259 "void(int8 value)" `140  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 1 261 "0"
D G "T2_DIV_BY_1" 1 262 "4"
D G "T2_DIV_BY_4" 1 263 "5"
D G "T2_DIV_BY_16" 1 264 "6"
c L "set_timer2" 1 1 3 "FUNCTION"
F N "setup_timer_3" 1 269 ""
V L "mode" 1 269 "int16" `143 
F B "setup_timer_3" 1 269 "void(int16 mode)" `142 
F N "get_timer3" 1 270 ""
F B "get_timer3" 1 270 "int16()" `144 
F N "set_timer3" 1 271 ""
V L "value" 1 271 "int16" `146 
F B "set_timer3" 1 271 "void(int16 value)" `145  "Constants used for SETUP_TIMER_3() are:"
D G "T3_DISABLED" 1 274 "0"
D G "T3_INTERNAL" 1 275 "0x07"
D G "T3_EXTERNAL" 1 276 "0x87"
D G "T3_EXTERNAL_SYNC" 1 277 "0x83"
D G "T3_FOSC" 1 278 "0x47"
D G "T3_ENABLE_SOSC" 1 280 "0x08"
D G "T3_DIV_BY_1" 1 282 "0"
D G "T3_DIV_BY_2" 1 283 "0x10"
D G "T3_DIV_BY_4" 1 284 "0x20"
D G "T3_DIV_BY_8" 1 285 "0x30"
D G "T3_GATE" 1 287 "0x8000"
D G "T3_GATE_INVERTED" 1 288 "0xC000"
D G "T3_GATE_TOGGLE" 1 289 "0xA000"
D G "T3_GATE_SINGLE" 1 290 "0x9000"
D G "T3_GATE_TIMER4" 1 291 "0x8100"
D G "T3_GATE_COMP1" 1 292 "0x8200"
D G "T3_GATE_COMP2" 1 293 "0x8300"
c L "set_timer3" 1 1 3 "FUNCTION"
F N "setup_timer_4" 1 298 ""
V L "mode" 1 298 "int16" `148 
V L "period" 1 298 "int8" `149 
V L "postscaler" 1 298 "int8" `150 
F B "setup_timer_4" 1 298 "void(int16 mode,int8 period,int8 postscaler)" `147 
F N "get_timer4" 1 299 ""
F B "get_timer4" 1 299 "int8()" `151 
F N "set_timer4" 1 300 ""
V L "value" 1 300 "int8" `153 
F B "set_timer4" 1 300 "void(int8 value)" `152  "Constants used for SETUP_TIMER_4() are:"
D G "T4_DISABLED" 1 302 "0"
D G "T4_DIV_BY_1" 1 303 "4"
D G "T4_DIV_BY_4" 1 304 "5"
D G "T4_DIV_BY_16" 1 305 "6"
c L "set_timer4" 1 1 3 "FUNCTION"
F N "setup_timer_5" 1 310 ""
V L "mode" 1 310 "int16" `155 
F B "setup_timer_5" 1 310 "void(int16 mode)" `154 
F N "get_timer5" 1 311 ""
F B "get_timer5" 1 311 "int16()" `156 
F N "set_timer5" 1 312 ""
V L "value" 1 312 "int16" `158 
F B "set_timer5" 1 312 "void(int16 value)" `157  "Constants used for SETUP_TIMER_5() are:"
D G "T5_DISABLED" 1 315 "0"
D G "T5_INTERNAL" 1 316 "0x07"
D G "T5_EXTERNAL" 1 317 "0x87"
D G "T5_EXTERNAL_SYNC" 1 318 "0x83"
D G "T5_FOSC" 1 319 "0x47"
D G "T5_LFINTRC" 1 320 "0xC7"
D G "T5_ENABLE_SOSC" 1 322 "0x08"
D G "T5_DIV_BY_1" 1 324 "0"
D G "T5_DIV_BY_2" 1 325 "0x10"
D G "T5_DIV_BY_4" 1 326 "0x20"
D G "T5_DIV_BY_8" 1 327 "0x30"
D G "T5_GATE" 1 329 "0x8000"
D G "T5_GATE_INVERTED" 1 330 "0xC000"
D G "T5_GATE_TOGGLE" 1 331 "0xA000"
D G "T5_GATE_SINGLE" 1 332 "0x9000"
D G "T5_GATE_TIMER6" 1 333 "0x8100"
D G "T5_GATE_COMP1" 1 334 "0x8200"
D G "T5_GATE_COMP2" 1 335 "0x8300"
c L "set_timer5" 1 1 3 "FUNCTION"
F N "setup_timer_6" 1 340 ""
V L "mode" 1 340 "int16" `160 
V L "period" 1 340 "int8" `161 
V L "postscaler" 1 340 "int8" `162 
F B "setup_timer_6" 1 340 "void(int16 mode,int8 period,int8 postscaler)" `159 
F N "get_timer6" 1 341 ""
F B "get_timer6" 1 341 "int8()" `163 
F N "set_timer6" 1 342 ""
V L "value" 1 342 "int8" `165 
F B "set_timer6" 1 342 "void(int8 value)" `164  "Constants used for SETUP_TIMER_6() are:"
D G "T6_DISABLED" 1 345 "0"
D G "T6_DIV_BY_1" 1 346 "4"
D G "T6_DIV_BY_4" 1 347 "5"
D G "T6_DIV_BY_16" 1 348 "6"
c L "set_timer6" 1 1 4 "FUNCTION"
F N "setup_ccp1" 1 354 ""
V L "mode" 1 354 "int32" `167 
F B "setup_ccp1" 1 354 "void(int32 mode)" `166 
F N "setup_ccp1" 1 355 ""
V L "mode" 1 355 "int32" `169 
V L "pwm" 1 355 "int8" `170 
F B "setup_ccp1" 1 355 "void(int32 mode,int8 pwm)" `168 
F N "set_pwm1_duty" 1 356 ""
V L "value" 1 356 "int8" `172 
F B "set_pwm1_duty" 1 356 "void(int8 value)" `171 
F N "set_pwm1_duty" 1 357 ""
V L "value" 1 357 "int16" `174 
F B "set_pwm1_duty" 1 357 "void(int16 value)" `173  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 1 359 "0"
D G "CCP_CAPTURE_FE" 1 360 "0x04"
D G "CCP_CAPTURE_RE" 1 361 "0x05"
D G "CCP_CAPTURE_DIV_4" 1 362 "0x06"
D G "CCP_CAPTURE_DIV_16" 1 363 "0x07"
D G "CCP_COMPARE_SET_ON_MATCH" 1 364 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 1 365 "0x09"
D G "CCP_COMPARE_INT" 1 366 "0x0A"
D G "CCP_COMPARE_INT_AND_TOGGLE" 1 367 "0x02"
D G "CCP_COMPARE_RESET_TIMER" 1 368 "0x0B"
D G "CCP_PWM" 1 369 "0x0C"
D G "CCP_PWM_PLUS_1" 1 370 "0x1c"
D G "CCP_PWM_PLUS_2" 1 371 "0x2c"
D G "CCP_PWM_PLUS_3" 1 372 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
D G "CCP_USE_TIMER1_AND_TIMER2" 1 382 "0x0000"
D G "CCP_USE_TIMER3_AND_TIMER4" 1 383 "0x0100"
D G "CCP_USE_TIMER5_AND_TIMER6" 1 384 "0x0200"
D G "CCP_PWM_H_H" 1 387 "0x0c"
D G "CCP_PWM_H_L" 1 388 "0x0d"
D G "CCP_PWM_L_H" 1 389 "0x0e"
D G "CCP_PWM_L_L" 1 390 "0x0f"
D G "CCP_PWM_FULL_BRIDGE" 1 392 "0x40"
D G "CCP_PWM_FULL_BRIDGE_REV" 1 393 "0xC0"
D G "CCP_PWM_HALF_BRIDGE" 1 394 "0x80"
D G "CCP_SHUTDOWN_ON_COMP1" 1 396 "0x100000"
D G "CCP_SHUTDOWN_ON_COMP2" 1 397 "0x200000"
D G "CCP_SHUTDOWN_ON_COMP" 1 398 "0x300000"
D G "CCP_SHUTDOWN_ON_INT0" 1 399 "0x400000"
D G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 400 "0x500000"
D G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 401 "0x600000"
D G "CCP_SHUTDOWN_ON_COMP_INT0" 1 402 "0x700000"
D G "CCP_SHUTDOWN_AC_L" 1 404 "0x000000"
D G "CCP_SHUTDOWN_AC_H" 1 405 "0x040000"
D G "CCP_SHUTDOWN_AC_F" 1 406 "0x080000"
D G "CCP_SHUTDOWN_BD_L" 1 408 "0x000000"
D G "CCP_SHUTDOWN_BD_H" 1 409 "0x010000"
D G "CCP_SHUTDOWN_BD_F" 1 410 "0x020000"
D G "CCP_SHUTDOWN_RESTART" 1 412 "0x80000000"
D G "CCP_PULSE_STEERING_A" 1 414 "0x01000000"
D G "CCP_PULSE_STEERING_B" 1 415 "0x02000000"
D G "CCP_PULSE_STEERING_C" 1 416 "0x04000000"
D G "CCP_PULSE_STEERING_D" 1 417 "0x08000000"
D G "CCP_PULSE_STEERING_SYNC" 1 418 "0x10000000"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
F N "setup_ccp2" 1 421 ""
V L "mode" 1 421 "int32" `179 
F B "setup_ccp2" 1 421 "void(int32 mode)" `178 
F N "setup_ccp2" 1 422 ""
V L "mode" 1 422 "int32" `181 
V L "pwm" 1 422 "int8" `182 
F B "setup_ccp2" 1 422 "void(int32 mode,int8 pwm)" `180 
F N "set_pwm2_duty" 1 423 ""
V L "value" 1 423 "int8" `184 
F B "set_pwm2_duty" 1 423 "void(int8 value)" `183 
F N "set_pwm2_duty" 1 424 ""
V L "value" 1 424 "int16" `186 
F B "set_pwm2_duty" 1 424 "void(int16 value)" `185 
c L "set_pwm2_duty" 1 1 1 "FUNCTION"
F N "setup_ccp3" 1 430 ""
V L "mode" 1 430 "int32" `191 
F B "setup_ccp3" 1 430 "void(int32 mode)" `190 
F N "setup_ccp3" 1 431 ""
V L "mode" 1 431 "int32" `193 
V L "pwm" 1 431 "int8" `194 
F B "setup_ccp3" 1 431 "void(int32 mode,int8 pwm)" `192 
F N "set_pwm3_duty" 1 432 ""
V L "value" 1 432 "int8" `196 
F B "set_pwm3_duty" 1 432 "void(int8 value)" `195 
F N "set_pwm3_duty" 1 433 ""
V L "value" 1 433 "int16" `198 
F B "set_pwm3_duty" 1 433 "void(int16 value)" `197 
c L "set_pwm3_duty" 1 1 1 "FUNCTION"
F N "setup_ccp4" 1 439 ""
V L "mode" 1 439 "int32" `203 
F B "setup_ccp4" 1 439 "void(int32 mode)" `202 
F N "setup_ccp4" 1 440 ""
V L "mode" 1 440 "int32" `205 
V L "pwm" 1 440 "int8" `206 
F B "setup_ccp4" 1 440 "void(int32 mode,int8 pwm)" `204 
F N "set_pwm4_duty" 1 441 ""
V L "value" 1 441 "int8" `208 
F B "set_pwm4_duty" 1 441 "void(int8 value)" `207 
F N "set_pwm4_duty" 1 442 ""
V L "value" 1 442 "int16" `210 
F B "set_pwm4_duty" 1 442 "void(int16 value)" `209 
c L "set_pwm4_duty" 1 1 1 "FUNCTION"
F N "setup_ccp5" 1 448 ""
V L "mode" 1 448 "int32" `215 
F B "setup_ccp5" 1 448 "void(int32 mode)" `214 
F N "setup_ccp5" 1 449 ""
V L "mode" 1 449 "int32" `217 
V L "pwm" 1 449 "int8" `218 
F B "setup_ccp5" 1 449 "void(int32 mode,int8 pwm)" `216 
F N "set_pwm5_duty" 1 450 ""
V L "value" 1 450 "int8" `220 
F B "set_pwm5_duty" 1 450 "void(int8 value)" `219 
F N "set_pwm5_duty" 1 451 ""
V L "value" 1 451 "int16" `222 
F B "set_pwm5_duty" 1 451 "void(int16 value)" `221 
c L "set_pwm5_duty" 1 1 3 "FUNCTION"
F N "setup_spi" 1 459 ""
V L "mode" 1 459 "int32" `227 
F B "setup_spi" 1 459 "void(int32 mode)" `226 
F N "spi_write" 1 460 ""
V L "value" 1 460 "int8" `229 
F B "spi_write" 1 460 "void(int8 value)" `228 
F N "spi_write" 1 461 ""
V L "wait" 1 461 "int8" `231 
V L "value" 1 461 "int8" `232 
F B "spi_write" 1 461 "void(int8 wait,int8 value)" `230 
F N "spi_read" 1 462 ""
F B "spi_read" 1 462 "int8()" `233 
F N "spi_read" 1 463 ""
V L "value" 1 463 "int8" `235 
F B "spi_read" 1 463 "int8(int8 value)" `234 
F N "spi_data_is_in" 1 464 ""
F B "spi_data_is_in" 1 464 "int8()" `236 
F N "setup_spi2" 1 465 ""
V L "mode" 1 465 "int32" `238 
F B "setup_spi2" 1 465 "void(int32 mode)" `237 
F N "spi_write2" 1 466 ""
V L "value" 1 466 "int8" `240 
F B "spi_write2" 1 466 "void(int8 value)" `239 
F N "spi_read2" 1 467 ""
F B "spi_read2" 1 467 "int8()" `241 
F N "spi_read2" 1 468 ""
V L "value" 1 468 "int8" `243 
F B "spi_read2" 1 468 "int8(int8 value)" `242 
F N "spi_data_is_in2" 1 469 ""
F B "spi_data_is_in2" 1 469 "int8()" `244  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 1 471 "0x00"
D G "SPI_MASTER" 1 472 "0x20"
D G "SPI_SLAVE" 1 473 "0x24"
D G "SPI_SCK_IDLE_HIGH" 1 474 "0x10"
D G "SPI_SCK_IDLE_LOW" 1 475 "0x00"
D G "SPI_CLK_DIV_4" 1 476 "0x00"
D G "SPI_CLK_DIV_16" 1 477 "0x01"
D G "SPI_CLK_DIV_64" 1 478 "0x02"
D G "SPI_CLK_T2" 1 479 "0x03"
D G "SPI_SS_DISABLED" 1 480 "0x01"
D G "SPI_XMIT_L_TO_H" 1 482 "0x4000"
D G "SPI_XMIT_H_TO_L" 1 483 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 1 485 "0x0000"
D G "SPI_SAMPLE_AT_END" 1 486 "0x8000"
D G "SPI_L_TO_H" 1 489 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 1 490 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 1 1 2 "FUNCTION"
F N "setup_uart" 1 494 ""
V L "baud" 1 494 "int32" `246 
F B "setup_uart" 1 494 "void(int32 baud)" `245 
F N "setup_uart" 1 495 ""
V L "baud" 1 495 "int32" `248 
V L "stream" 1 495 "int8" `249 
F B "setup_uart" 1 495 "void(int32 baud,int8 stream)" `247 
F N "setup_uart" 1 496 ""
V L "baud" 1 496 "int32" `251 
V L "stream" 1 496 "int8" `252 
V L "clock" 1 496 "int32" `253 
F B "setup_uart" 1 496 "void(int32 baud,int8 stream,int32 clock)" `250 
F N "set_uart_speed" 1 497 ""
V L "baud" 1 497 "int32" `255 
F B "set_uart_speed" 1 497 "void(int32 baud)" `254 
F N "set_uart_speed" 1 498 ""
V L "baud" 1 498 "int32" `257 
V L "stream" 1 498 "int8" `258 
F B "set_uart_speed" 1 498 "void(int32 baud,int8 stream)" `256 
F N "set_uart_speed" 1 499 ""
V L "baud" 1 499 "int32" `260 
V L "stream" 1 499 "int8" `261 
V L "clock" 1 499 "int32" `262 
F B "set_uart_speed" 1 499 "void(int32 baud,int8 stream,int32 clock)" `259  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 1 503 "2"
D G "UART_DATA" 1 504 "4"
D G "UART_AUTODETECT" 1 505 "8"
D G "UART_AUTODETECT_NOWAIT" 1 506 "9"
D G "UART_WAKEUP_ON_RDA" 1 507 "10"
D G "UART_SEND_BREAK" 1 508 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
F N "setup_comparator" 1 513 ""
V L "mode" 1 513 "int32" `264 
F B "setup_comparator" 1 513 "void(int32 mode)" `263  "Constants used in setup_comparator() are:"
D G "NC_NC_NC_NC" 1 516 "0x404"
D G "NC_NC" 1 517 "0x404"
D G "CP1_A0_A3" 1 520 "0x000080"
D G "CP1_A1_A3" 1 521 "0x000081"
D G "CP1_B3_A3" 1 522 "0x000082"
D G "CP1_B1_A3" 1 523 "0x000083"
D G "CP1_A0_DAC" 1 524 "0x000084"
D G "CP1_A1_DAC" 1 525 "0x000085"
D G "CP1_B3_DAC" 1 526 "0x000086"
D G "CP1_B1_DAC" 1 527 "0x000087"
D G "CP1_A0_FVR" 1 528 "0x200084"
D G "CP1_A1_FVR" 1 529 "0x200085"
D G "CP1_B3_FVR" 1 530 "0x200086"
D G "CP1_B1_FVR" 1 531 "0x200087"
D G "CP1_OUT_ON_A4" 1 533 "0x000020"
D G "CP1_INVERT" 1 534 "0x000010"
D G "CP1_FAST" 1 535 "0x000008"
D G "CP1_HYST" 1 536 "0x080000"
D G "CP1_SYNC" 1 537 "0x020000"
D G "CP2_A0_A2" 1 540 "0x008000"
D G "CP2_A1_A2" 1 541 "0x008100"
D G "CP2_B3_A2" 1 542 "0x008200"
D G "CP2_B1_A2" 1 543 "0x008300"
D G "CP2_A0_DAC" 1 544 "0x008400"
D G "CP2_A1_DAC" 1 545 "0x008500"
D G "CP2_B3_DAC" 1 546 "0x008600"
D G "CP2_B1_DAC" 1 547 "0x008700"
D G "CP2_A0_FVR" 1 548 "0x108400"
D G "CP2_A1_FVR" 1 549 "0x108500"
D G "CP2_B3_FVR" 1 550 "0x108600"
D G "CP2_B1_FVR" 1 551 "0x108700"
D G "CP2_OUT_ON_A5" 1 553 "0x002000"
D G "CP2_INVERT" 1 554 "0x001000"
D G "CP2_FAST" 1 555 "0x000800"
D G "CP2_HYST" 1 556 "0x040000"
D G "CP2_SYNC" 1 557 "0x010000"
c L "setup_comparator" 1 1 2 "FUNCTION"
F N "setup_vref" 1 564 ""
V L "mode" 1 564 "int8" `268 
F B "setup_vref" 1 564 "void(int8 mode)" `267  "Constants used in setup_vref() are:"
D G "VREF_OFF" 1 566 "0"
D G "VREF_1v024" 1 567 "0x90"
D G "VREF_2v048" 1 568 "0xA0"
D G "VREF_4v096" 1 569 "0xB0"
c L "setup_vref" 1 1 2 "FUNCTION"
F N "setup_low_volt_detect" 1 573 ""
V L "mode" 1 573 "int8" `270 
F B "setup_low_volt_detect" 1 573 "void(int8 mode)" `269  "Constants used in setup_low_volt_detect() are:"
D G "LVD_LVDIN" 1 575 "0x1F"
D G "LVD_47" 1 576 "0x1E"
D G "LVD_43" 1 577 "0x1D"
D G "LVD_41" 1 578 "0x1C"
D G "LVD_38" 1 579 "0x1B"
D G "LVD_36" 1 580 "0x1A"
D G "LVD_34" 1 581 "0x19"
D G "LVD_32" 1 582 "0x18"
D G "LVD_29" 1 583 "0x17"
D G "LVD_28" 1 584 "0x16"
D G "LVD_27" 1 585 "0x15"
D G "LVD_25" 1 586 "0x14"
D G "LVD_24" 1 587 "0x13"
D G "LVD_22" 1 588 "0x12"
D G "LVD_20" 1 589 "0x11"
D G "LVD_18" 1 590 "0x10"
D G "LVD_TRIGGER_BELOW" 1 592 "0"
D G "LVD_TRIGGER_ABOVE" 1 593 "0x80"
c L "setup_low_volt_detect" 1 1 3 "FUNCTION"
F N "setup_dac" 1 598 ""
V L "mode" 1 598 "int8" `272 
F B "setup_dac" 1 598 "void(int8 mode)" `271 
F N "dac_write" 1 599 ""
V L "value" 1 599 "int8" `274 
F B "dac_write" 1 599 "void(int8 value)" `273  "Constants used in SETUP_DAC() are:"
D G "DAC_OFF" 1 601 "0"
D G "DAC_VSS_VDD" 1 602 "0x80"
D G "DAC_VREF_VDD" 1 603 "0x81"
D G "DAC_VSS_VREF" 1 604 "0x84"
D G "DAC_VREF_VREF" 1 605 "0x85"
D G "DAC_VSS_FVR" 1 606 "0x88"
D G "DAC_VREF_FVR" 1 607 "0x89"
D G "DAC_OUTPUT" 1 609 "0x20"
D G "DAC_LVP_POS" 1 610 "0x40"
D G "DAC_LVP_NEG" 1 611 "0"
c L "dac_write" 1 1 2 "FUNCTION"
F N "setup_oscillator" 1 616 ""
V L "mode" 1 616 "int16" `276 
F B "setup_oscillator" 1 616 "int8(int16 mode)" `275 
F N "setup_oscillator" 1 617 ""
V L "mode" 1 617 "int16" `278 
V L "tune" 1 617 "sint8" `279 
F B "setup_oscillator" 1 617 "int8(int16 mode,sint8 tune)" `277  "Constants used in setup_oscillator() are:"
D G "OSC_PLL_ON" 1 619 "0x4000"
D G "OSC_PLL_OFF" 1 620 "0"
D G "OSC_31250" 1 621 "0x8000"
D G "OSC_31KHZ" 1 622 "0x00"
D G "OSC_250KHZ" 1 623 "0x10"
D G "OSC_500KHZ" 1 624 "0x20"
D G "OSC_1MHZ" 1 625 "0x30"
D G "OSC_2MHZ" 1 626 "0x40"
D G "OSC_4MHZ" 1 627 "0x50"
D G "OSC_8MHZ" 1 628 "0x60"
D G "OSC_16MHZ" 1 629 "0x70"
D G "OSC_32MHZ" 1 630 "0x4060"
D G "OSC_64MHZ" 1 631 "0x4070"
D G "OSC_TIMER1" 1 633 "1"
D G "OSC_INTRC" 1 634 "2"
D G "OSC_NORMAL" 1 635 "0"
D G "OSC_IDLE_MODE" 1 637 "0x80"
D G "OSC_STATE_STABLE" 1 641 "4"
D G "OSC_STATE_EXT_RUNNING" 1 642 "8"
c L "setup_oscillator" 1 1 4 "FUNCTION"
F N "setup_adc" 1 649 ""
V L "mode" 1 649 "int16" `281 
F B "setup_adc" 1 649 "void(int16 mode)" `280 
F N "read_adc" 1 650 ""
F B "read_adc" 1 650 "int8()" `282 
F N "read_adc" 1 651 ""
V L "mode" 1 651 "int8" `284 
F B "read_adc" 1 651 "int8(int8 mode)" `283 
F N "read_adc" 1 652 ""
f G "read_adc" 1 652 "int16()" `285 
F N "read_adc" 1 653 ""
V L "mode" 1 653 "int8" `286 
f G "read_adc" 1 653 "int16(int8 mode,int32 pins)" `285 
F N "adc_done" 1 654 ""
F B "adc_done" 1 654 "int8(int8 mode,int32 pins)" `285  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 1 656 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 1 657 "0x100"
D G "ADC_CLOCK_DIV_4" 1 658 "0x04"
D G "ADC_CLOCK_DIV_8" 1 659 "0x01"
D G "ADC_CLOCK_DIV_16" 1 660 "0x05"
D G "ADC_CLOCK_DIV_32" 1 661 "0x02"
D G "ADC_CLOCK_DIV_64" 1 662 "0x06"
D G "ADC_CLOCK_INTERNAL" 1 663 "0x07" "Internal 2-6us"
D G "ADC_TAD_MUL_0" 1 665 "0x00"
D G "ADC_TAD_MUL_2" 1 666 "0x08"
D G "ADC_TAD_MUL_4" 1 667 "0x10"
D G "ADC_TAD_MUL_6" 1 668 "0x18"
D G "ADC_TAD_MUL_8" 1 669 "0x20"
D G "ADC_TAD_MUL_12" 1 670 "0x28"
D G "ADC_TAD_MUL_16" 1 671 "0x30"
D G "ADC_TAD_MUL_20" 1 672 "0x38"
c L "adc_done" 1 1 1 "FUNCTION"
F N "setup_adc_ports" 1 675 ""
V L "pins" 1 675 "int32" `287 
F B "setup_adc_ports" 1 675 "void(int32 pins)" `286 
F N "setup_adc_ports" 1 676 ""
V L "pins" 1 676 "int32" `289 
V L "reference" 1 676 "int32" `290 
F B "setup_adc_ports" 1 676 "void(int32 pins,int32 reference)" `288 
F N "set_analog_pins" 1 677 ""
V L "pin" 1 677 "int8" `292 
F B "set_analog_pins" 1 677 "void(int8 pin,*int8 _VA_LIST)" `291 
F N "setup_adc_reference" 1 678 ""
V L "reference" 1 678 "int32" `295 
F B "setup_adc_reference" 1 678 "void(int32 reference)" `294 
F N "set_adc_channel" 1 679 ""
V L "channel" 1 679 "int8" `297 
F B "set_adc_channel" 1 679 "void(int8 channel)" `296  "Constants used in SETUP_ADC_PORTS() are:"
D G "sAN0" 1 683 "0x00800000" "| A0"
D G "sAN1" 1 684 "0x01000000" "| A1"
D G "sAN2" 1 685 "0x02000000" "| A2"
D G "sAN3" 1 686 "0x04000000" "| A3"
D G "sAN4" 1 687 "0x08000000" "| A5"
D G "sAN8" 1 688 "0x00010000" "| B2"
D G "sAN9" 1 689 "0x00020000" "| B3"
D G "sAN10" 1 690 "0x00008000" "| B1"
D G "sAN11" 1 691 "0x00040000" "| B4"
D G "sAN12" 1 692 "0x00004000" "| B0"
D G "sAN13" 1 693 "0x00080000" "| B5"
D G "sAN14" 1 694 "0x00000100" "| C2"
D G "sAN15" 1 695 "0x00000200" "| C3"
D G "sAN16" 1 696 "0x00000400" "| C4"
D G "sAN17" 1 697 "0x00000800" "| C5"
D G "sAN18" 1 698 "0x00001000" "| C6"
D G "sAN19" 1 699 "0x00002000" "| C7"
D G "NO_ANALOGS" 1 700 "0" "None"
D G "ALL_ANALOG" 1 701 "0x0F8FFF00" "A0 A1 A2 A3 A5 B2 B3 B1 B4 B0 B5 C2 C3 C4 C5 C6 C7"
D G "VSS_VDD" 1 704 "0x00000000" "| Range 0-Vdd"
D G "VSS_VREF" 1 705 "0x40000000" "| Range 0-VrefH"
D G "VSS_FVR" 1 706 "0x80000000" "| Range 0-Fvr BUF2"
D G "VREF_VDD" 1 707 "0x10000000" "| Range VrefL-Vdd"
D G "VREF_VREF" 1 708 "0x50000000" "| Range VrefL-VrefH"
D G "VREF_FVR" 1 709 "0x90000000" "| Range VrefL-Fvr BUF2"
D G "CTMU_CHANNEL" 1 713 "0x1D"
D G "DAC_CHANNEL" 1 714 "0x1E"
D G "FVR_CHANNEL" 1 715 "0x1F"
D G "ADC_START_AND_READ" 1 718 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 1 719 "1"
D G "ADC_READ_ONLY" 1 720 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
F N "abs" 1 726 ""
V L "x" 1 726 "sint8" `299 
F B "abs" 1 726 "sint8(sint8 x)" `298 
F N "abs" 1 727 ""
V L "x" 1 727 "sint16" `301 
F B "abs" 1 727 "sint16(sint16 x)" `300 
F N "abs" 1 728 ""
V L "x" 1 728 "sint32" `303 
F B "abs" 1 728 "sint32(sint32 x)" `302 
F N "abs" 1 729 ""
V L "x" 1 729 "float" `305 
F B "abs" 1 729 "float(float x)" `304 
F N "_mul" 1 730 ""
V L "??65535" 1 730 "int8" `307 
V L "??65535" 1 730 "int8" `308 
F B "_mul" 1 730 "int16(int8 ,int8 )" `306 
F N "_mul" 1 731 ""
V L "??65535" 1 731 "sint8" `310 
V L "??65535" 1 731 "sint8" `311 
F B "_mul" 1 731 "sint16(sint8 ,sint8 )" `309 
F N "_mul" 1 732 ""
V L "??65535" 1 732 "int16" `313 
V L "??65535" 1 732 "int16" `314 
F B "_mul" 1 732 "int32(int16 ,int16 )" `312 
F N "_mul" 1 733 ""
V L "??65535" 1 733 "sint16" `316 
V L "??65535" 1 733 "sint16" `317 
F B "_mul" 1 733 "sint32(sint16 ,sint16 )" `315  "Memory Manipulation Prototypes:"
F N "read_bank" 1 736 ""
V L "bank" 1 736 "int8" `319 
V L "offset" 1 736 "int8" `320 
F B "read_bank" 1 736 "int8(int8 bank,int8 offset)" `318 
F N "write_bank" 1 737 ""
V L "bank" 1 737 "int8" `322 
V L "offset" 1 737 "int8" `323 
V L "value" 1 737 "int8" `324 
F B "write_bank" 1 737 "void(int8 bank,int8 offset,int8 value)" `321 
F N "strcpy" 1 738 ""
V L "dest" 1 738 "*int8" `326 
V L "src" 1 738 "*int8" `327 
F B "strcpy" 1 738 "void(*int8 dest,*int8 src)" `325 
F N "memset" 1 739 ""
V L "destination" 1 739 "*int8" `329 
V L "value" 1 739 "int8" `330 
V L "num" 1 739 "int16" `331 
F B "memset" 1 739 "void(*int8 destination,int8 value,int16 num)" `328 
F N "memcpy" 1 740 ""
V L "destination" 1 740 "*int8" `333 
V L "source" 1 740 "*int8" `334 
V L "num" 1 740 "int16" `335 
F B "memcpy" 1 740 "void(*int8 destination,*int8 source,int16 num)" `332  "String Prototypes:"
F N "toupper" 1 743 ""
V L "cvalue" 1 743 "int8" `337 
F B "toupper" 1 743 "int8(int8 cvalue)" `336 
F N "tolower" 1 744 ""
V L "cvalue" 1 744 "int8" `339 
F B "tolower" 1 744 "int8(int8 cvalue)" `338 
F N "sprintf" 1 745 ""
V L "string" 1 745 "*int8" `341 
V L "cstring" 1 745 "*int8" `342 
F B "sprintf" 1 745 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `340  "Data Manipulators Prototypes:"
F N "shift_left" 1 748 ""
V L "address" 1 748 "*int8" `345 
V L "bytes" 1 748 "int8" `346 
V L "value" 1 748 "int8" `347 
F B "shift_left" 1 748 "int8(*int8 address,int8 bytes,int8 value)" `344 
F N "shift_right" 1 749 ""
V L "address" 1 749 "*int8" `349 
V L "bytes" 1 749 "int8" `350 
V L "value" 1 749 "int8" `351 
F B "shift_right" 1 749 "int8(*int8 address,int8 bytes,int8 value)" `348 
F N "rotate_left" 1 750 ""
V L "address" 1 750 "*int8" `353 
V L "bytes" 1 750 "int8" `354 
F B "rotate_left" 1 750 "void(*int8 address,int8 bytes)" `352 
F N "rotate_right" 1 751 ""
V L "address" 1 751 "*int8" `356 
V L "bytes" 1 751 "int8" `357 
F B "rotate_right" 1 751 "void(*int8 address,int8 bytes)" `355 
F N "swap" 1 752 ""
V L "value" 1 752 "int8" `359 
F B "swap" 1 752 "void(int8 value)" `358 
F N "make8" 1 753 ""
V L "var" 1 753 "int16" `361 
V L "offset" 1 753 "int8" `362 
F B "make8" 1 753 "int8(int16 var,int8 offset)" `360 
F N "make8" 1 754 ""
V L "var" 1 754 "int32" `364 
V L "offset" 1 754 "int8" `365 
F B "make8" 1 754 "int8(int32 var,int8 offset)" `363 
F N "make16" 1 755 ""
V L "varhigh" 1 755 "int8" `367 
V L "varlow" 1 755 "int8" `368 
F B "make16" 1 755 "int16(int8 varhigh,int8 varlow)" `366 
F N "make32" 1 756 ""
V L "var1" 1 756 "int16" `370 
F B "make32" 1 756 "int32(int16 var1)" `369 
F N "make32" 1 757 ""
V L "var1" 1 757 "int16" `372 
V L "var2" 1 757 "int16" `373 
F B "make32" 1 757 "int32(int16 var1,int16 var2)" `371 
F N "make32" 1 758 ""
V L "var1" 1 758 "int16" `375 
V L "var2" 1 758 "int8" `376 
F B "make32" 1 758 "int32(int16 var1,int8 var2)" `374 
F N "make32" 1 759 ""
V L "var1" 1 759 "int16" `378 
V L "var2" 1 759 "int8" `379 
V L "var3" 1 759 "int8" `380 
F B "make32" 1 759 "int32(int16 var1,int8 var2,int8 var3)" `377 
F N "make32" 1 760 ""
V L "var1" 1 760 "int8" `382 
F B "make32" 1 760 "int32(int8 var1)" `381 
F N "make32" 1 761 ""
V L "var1" 1 761 "int8" `384 
V L "var2" 1 761 "int8" `385 
F B "make32" 1 761 "int32(int8 var1,int8 var2)" `383 
F N "make32" 1 762 ""
V L "var1" 1 762 "int8" `387 
V L "var2" 1 762 "int8" `388 
V L "var3" 1 762 "int8" `389 
F B "make32" 1 762 "int32(int8 var1,int8 var2,int8 var3)" `386 
F N "make32" 1 763 ""
V L "var1" 1 763 "int8" `391 
V L "var2" 1 763 "int8" `392 
V L "var3" 1 763 "int8" `393 
V L "var4" 1 763 "int8" `394 
F B "make32" 1 763 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `390 
F N "make32" 1 764 ""
V L "var1" 1 764 "int8" `396 
V L "var2" 1 764 "int16" `397 
F B "make32" 1 764 "int32(int8 var1,int16 var2)" `395 
F N "make32" 1 765 ""
V L "var1" 1 765 "int8" `399 
V L "var2" 1 765 "int16" `400 
V L "var3" 1 765 "int8" `401 
F B "make32" 1 765 "int32(int8 var1,int16 var2,int8 var3)" `398 
F N "make32" 1 766 ""
V L "var1" 1 766 "int8" `403 
V L "var2" 1 766 "int8" `404 
V L "var3" 1 766 "int16" `405 
F B "make32" 1 766 "int32(int8 var1,int8 var2,int16 var3)" `402 
F N "bit_set" 1 767 ""
V L "var" 1 767 "int8" `407 
V L "bit" 1 767 "int8" `408 
F B "bit_set" 1 767 "void(int8 var,int8 bit)" `406 
F N "bit_set" 1 768 ""
V L "var" 1 768 "int16" `410 
V L "bit" 1 768 "int8" `411 
F B "bit_set" 1 768 "void(int16 var,int8 bit)" `409 
F N "bit_set" 1 769 ""
V L "var" 1 769 "int32" `413 
V L "bit" 1 769 "int8" `414 
F B "bit_set" 1 769 "void(int32 var,int8 bit)" `412 
F N "bit_clear" 1 770 ""
V L "var" 1 770 "int8" `416 
V L "bit" 1 770 "int8" `417 
F B "bit_clear" 1 770 "void(int8 var,int8 bit)" `415 
F N "bit_clear" 1 771 ""
V L "var" 1 771 "int16" `419 
V L "bit" 1 771 "int8" `420 
F B "bit_clear" 1 771 "void(int16 var,int8 bit)" `418 
F N "bit_clear" 1 772 ""
V L "var" 1 772 "int32" `422 
V L "bit" 1 772 "int8" `423 
F B "bit_clear" 1 772 "void(int32 var,int8 bit)" `421 
F N "bit_test" 1 773 ""
V L "var" 1 773 "int8" `425 
V L "bit" 1 773 "int8" `426 
F B "bit_test" 1 773 "int8(int8 var,int8 bit)" `424 
F N "bit_test" 1 774 ""
V L "var" 1 774 "int16" `428 
V L "bit" 1 774 "int8" `429 
F B "bit_test" 1 774 "int8(int16 var,int8 bit)" `427 
F N "bit_test" 1 775 ""
V L "var" 1 775 "int32" `431 
V L "bit" 1 775 "int8" `432 
F B "bit_test" 1 775 "int8(int32 var,int8 bit)" `430  "#use delay() Prototypes:"
F N "delay_cycles" 1 778 ""
V L "count" 1 778 "int8" `434 
F B "delay_cycles" 1 778 "void(int8 count)" `433 
F N "delay_ms" 1 779 ""
V L "time" 1 779 "int16" `436 
F B "delay_ms" 1 779 "void(int16 time)" `435 
F N "delay_us" 1 780 ""
V L "time" 1 780 "int16" `438 
F B "delay_us" 1 780 "void(int16 time)" `437  "#use rs232() Prototypes:"
F N "putchar" 1 783 ""
V L "cdata" 1 783 "int8" `440 
F B "putchar" 1 783 "void(int8 cdata)" `439 
F N "putchar" 1 784 ""
V L "cdata" 1 784 "int8" `442 
V L "stream" 1 784 "int8" `443 
F B "putchar" 1 784 "void(int8 cdata,int8 stream)" `441 
F N "puts" 1 785 ""
V L "string" 1 785 "*int8" `445 
F B "puts" 1 785 "void(*int8 string)" `444 
F N "puts" 1 786 ""
V L "string" 1 786 "*int8" `447 
V L "stream" 1 786 "int8" `448 
F B "puts" 1 786 "void(*int8 string,int8 stream)" `446 
F N "getch" 1 787 ""
F B "getch" 1 787 "int8()" `449 
F N "getch" 1 788 ""
V L "stream" 1 788 "int8" `451 
F B "getch" 1 788 "int8(int8 stream)" `450 
F N "gets" 1 789 ""
V L "string" 1 789 "*int8" `453 
F B "gets" 1 789 "void(*int8 string)" `452 
F N "gets" 1 790 ""
V L "string" 1 790 "*int8" `455 
V L "stream" 1 790 "int8" `456 
F B "gets" 1 790 "void(*int8 string,int8 stream)" `454 
F N "kbhit" 1 791 ""
F B "kbhit" 1 791 "int8()" `457 
F N "kbhit" 1 792 ""
V L "stream" 1 792 "int8" `459 
F B "kbhit" 1 792 "int8(int8 stream)" `458 
F N "printf" 1 793 ""
V L "string" 1 793 "*int8" `461 
F B "printf" 1 793 "void(*int8 string,*int8 _VA_LIST)" `460 
F N "fprintf" 1 794 ""
V L "stream" 1 794 "int8" `464 
V L "string" 1 794 "*int8" `465 
F B "fprintf" 1 794 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `463 
F N "putc_send" 1 795 ""
F B "putc_send" 1 795 "void()" `467 
F N "fputc_send" 1 796 ""
V L "stream" 1 796 "int8" `469 
F B "fputc_send" 1 796 "void(int8 stream)" `468 
F N "rcv_buffer_full" 1 797 ""
F B "rcv_buffer_full" 1 797 "int8()" `470 
F N "rcv_buffer_full" 1 798 ""
V L "stream" 1 798 "int8" `472 
F B "rcv_buffer_full" 1 798 "int8(int8 stream)" `471 
F N "rcv_buffer_bytes" 1 799 ""
F B "rcv_buffer_bytes" 1 799 "int16()" `473 
F N "rcv_buffer_bytes" 1 800 ""
V L "stream" 1 800 "int8" `475 
F B "rcv_buffer_bytes" 1 800 "int16(int8 stream)" `474 
F N "tx_buffer_full" 1 801 ""
F B "tx_buffer_full" 1 801 "int8()" `476 
F N "tx_buffer_full" 1 802 ""
V L "stream" 1 802 "int8" `478 
F B "tx_buffer_full" 1 802 "int8(int8 stream)" `477 
F N "tx_buffer_bytes" 1 803 ""
F B "tx_buffer_bytes" 1 803 "int16()" `479 
F N "tx_buffer_bytes" 1 804 ""
V L "stream" 1 804 "int8" `481 
F B "tx_buffer_bytes" 1 804 "int16(int8 stream)" `480 
F N "linbus_header" 1 805 ""
V L "identifier" 1 805 "int8" `483 
F B "linbus_header" 1 805 "int8(int8 identifier)" `482 
F N "linbus_header" 1 806 ""
V L "stream" 1 806 "int8" `485 
V L "identifier" 1 806 "int8" `486 
F B "linbus_header" 1 806 "int8(int8 stream,int8 identifier)" `484 
F N "linbus_header_hit" 1 807 ""
F B "linbus_header_hit" 1 807 "int8()" `487 
F N "linbus_header_hit" 1 808 ""
V L "stream" 1 808 "int8" `489 
F B "linbus_header_hit" 1 808 "int8(int8 stream)" `488 
F N "linbus_header_get" 1 809 ""
F B "linbus_header_get" 1 809 "int8()" `490 
F N "linbus_header_get" 1 810 ""
V L "stream" 1 810 "int8" `492 
F B "linbus_header_get" 1 810 "int8(int8 stream)" `491 
F N "linbus_rx_response" 1 811 ""
V L "DataPtr" 1 811 "*int8" `494 
V L "count" 1 811 "int8" `495 
F B "linbus_rx_response" 1 811 "int8(*int8 DataPtr,int8 count)" `493 
F N "linbus_rx_response" 1 812 ""
V L "stream" 1 812 "int8" `497 
V L "DataPtr" 1 812 "*int8" `498 
V L "count" 1 812 "int8" `499 
F B "linbus_rx_response" 1 812 "int8(int8 stream,*int8 DataPtr,int8 count)" `496 
F N "linbus_tx_response" 1 813 ""
V L "DataPtr" 1 813 "*int8" `501 
V L "count" 1 813 "int8" `502 
F B "linbus_tx_response" 1 813 "void(*int8 DataPtr,int8 count)" `500 
F N "linbus_tx_response" 1 814 ""
V L "stream" 1 814 "int8" `504 
V L "DataPtr" 1 814 "*int8" `505 
V L "count" 1 814 "int8" `506 
F B "linbus_tx_response" 1 814 "void(int8 stream,*int8 DataPtr,int8 count)" `503 
F N "linbus_checksum_type" 1 815 ""
V L "type" 1 815 "int8" `508 
F B "linbus_checksum_type" 1 815 "void(int8 type)" `507 
F N "linbus_checksum_type" 1 816 ""
V L "stream" 1 816 "int8" `510 
V L "type" 1 816 "int8" `511 
F B "linbus_checksum_type" 1 816 "void(int8 stream,int8 type)" `509  "#use i2c() Prototypes:"
F N "i2c_read" 1 819 ""
F B "i2c_read" 1 819 "int8()" `512 
F N "i2c_read" 1 820 ""
V L "ack" 1 820 "int8" `514 
F B "i2c_read" 1 820 "int8(int8 ack)" `513 
F N "i2c_read" 1 821 ""
V L "stream" 1 821 "int8" `516 
V L "ack" 1 821 "int8" `517 
F B "i2c_read" 1 821 "int8(int8 stream,int8 ack)" `515 
F N "i2c_write" 1 822 ""
V L "data" 1 822 "int8" `519 
F B "i2c_write" 1 822 "int8(int8 data)" `518 
F N "i2c_write" 1 823 ""
V L "stream" 1 823 "int8" `521 
V L "data" 1 823 "int8" `522 
F B "i2c_write" 1 823 "int8(int8 stream,int8 data)" `520 
F N "i2c_start" 1 824 ""
F B "i2c_start" 1 824 "void()" `523 
F N "i2c_start" 1 825 ""
V L "stream" 1 825 "int8" `525 
F B "i2c_start" 1 825 "void(int8 stream)" `524 
F N "i2c_start" 1 826 ""
V L "stream" 1 826 "int8" `527 
V L "restart" 1 826 "int8" `528 
F B "i2c_start" 1 826 "void(int8 stream,int8 restart)" `526 
F N "i2c_stop" 1 827 ""
F B "i2c_stop" 1 827 "void()" `529 
F N "i2c_stop" 1 828 ""
V L "stream" 1 828 "int8" `531 
F B "i2c_stop" 1 828 "void(int8 stream)" `530 
F N "i2c_isr_state" 1 829 ""
F B "i2c_isr_state" 1 829 "int8()" `532 
F N "i2c_slaveaddr" 1 830 ""
V L "addr" 1 830 "int8" `534 
F B "i2c_slaveaddr" 1 830 "void(int8 addr)" `533 
F N "i2c_slaveaddr" 1 831 ""
V L "stream" 1 831 "int8" `536 
V L "addr" 1 831 "int8" `537 
F B "i2c_slaveaddr" 1 831 "void(int8 stream,int8 addr)" `535 
F N "i2c_poll" 1 832 ""
F B "i2c_poll" 1 832 "int8()" `538 
F N "i2c_poll" 1 833 ""
V L "stream" 1 833 "int8" `540 
F B "i2c_poll" 1 833 "int8(int8 stream)" `539 
F N "i2c_init" 1 834 ""
V L "baud" 1 834 "int32" `542 
F B "i2c_init" 1 834 "void(int32 baud)" `541 
F N "i2c_init" 1 835 ""
V L "stream" 1 835 "int8" `544 
V L "baud" 1 835 "int32" `545 
F B "i2c_init" 1 835 "void(int8 stream,int32 baud)" `543 
F N "i2c_transfer" 1 836 ""
V L "address" 1 836 "int8" `547 
V L "wData" 1 836 "*int8" `548 
V L "wCount" 1 836 "int8" `549 
F B "i2c_transfer" 1 836 "int8(int8 address,*int8 wData,int8 wCount)" `546 
F N "i2c_transfer" 1 837 ""
V L "address" 1 837 "int8" `551 
V L "wData" 1 837 "*int8" `552 
V L "wCount" 1 837 "int8" `553 
V L "rData" 1 837 "*int8" `554 
V L "rCount" 1 837 "*int8" `555 
F B "i2c_transfer" 1 837 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `550 
F N "i2c_transfer" 1 838 ""
V L "stream" 1 838 "int8" `557 
V L "address" 1 838 "int8" `558 
V L "wData" 1 838 "*int8" `559 
V L "wCount" 1 838 "int8" `560 
F B "i2c_transfer" 1 838 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `556 
F N "i2c_transfer" 1 839 ""
V L "stream" 1 839 "int8" `562 
V L "address" 1 839 "int8" `563 
V L "wData" 1 839 "*int8" `564 
V L "wCount" 1 839 "int8" `565 
V L "rData" 1 839 "*int8" `566 
V L "rCount" 1 839 "*int8" `567 
F B "i2c_transfer" 1 839 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `561 
F N "i2c_transfer_out" 1 840 ""
V L "address" 1 840 "int8" `569 
V L "wData" 1 840 "*int8" `570 
V L "wCount" 1 840 "int8" `571 
F B "i2c_transfer_out" 1 840 "int8(int8 address,*int8 wData,int8 wCount)" `568 
F N "i2c_transfer_out" 1 841 ""
V L "stream" 1 841 "int8" `573 
V L "address" 1 841 "int8" `574 
V L "wData" 1 841 "*int8" `575 
V L "wCount" 1 841 "int8" `576 
F B "i2c_transfer_out" 1 841 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `572 
F N "i2c_transfer_in" 1 842 ""
V L "address" 1 842 "int8" `578 
V L "rData" 1 842 "*int8" `579 
V L "rCount" 1 842 "int8" `580 
F B "i2c_transfer_in" 1 842 "int8(int8 address,*int8 rData,int8 rCount)" `577 
F N "i2c_transfer_in" 1 843 ""
V L "stream" 1 843 "int8" `582 
V L "address" 1 843 "int8" `583 
V L "rData" 1 843 "*int8" `584 
V L "rCount" 1 843 "int8" `585 
F B "i2c_transfer_in" 1 843 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `581  "#use spi() Prototypes:"
F N "spi_xfer" 1 846 ""
F B "spi_xfer" 1 846 "int8()" `586 
F N "spi_xfer" 1 847 ""
f G "spi_xfer" 1 847 "int16(int8 data)" `587 
F N "spi_xfer" 1 848 ""
f G "spi_xfer" 1 848 "int32(int8 data)" `587 
F N "spi_xfer" 1 849 ""
V L "data" 1 849 "int8" `588 
F B "spi_xfer" 1 849 "int8(int8 data)" `587 
F N "spi_xfer" 1 850 ""
V L "data" 1 850 "int16" `590 
F B "spi_xfer" 1 850 "int16(int16 data)" `589 
F N "spi_xfer" 1 851 ""
V L "data" 1 851 "int32" `592 
F B "spi_xfer" 1 851 "int32(int32 data)" `591 
F N "spi_xfer" 1 852 ""
V L "stream" 1 852 "int8" `594 
V L "data" 1 852 "int8" `595 
F B "spi_xfer" 1 852 "int8(int8 stream,int8 data)" `593 
F N "spi_xfer" 1 853 ""
V L "stream" 1 853 "int8" `597 
V L "data" 1 853 "int16" `598 
F B "spi_xfer" 1 853 "int16(int8 stream,int16 data)" `596 
F N "spi_xfer" 1 854 ""
V L "stream" 1 854 "int8" `600 
V L "data" 1 854 "int32" `601 
F B "spi_xfer" 1 854 "int32(int8 stream,int32 data)" `599 
F N "spi_xfer" 1 855 ""
V L "stream" 1 855 "int8" `603 
V L "data" 1 855 "int8" `604 
V L "bits" 1 855 "int8" `605 
F B "spi_xfer" 1 855 "int8(int8 stream,int8 data,int8 bits)" `602 
F N "spi_xfer" 1 856 ""
V L "stream" 1 856 "int8" `607 
V L "data" 1 856 "int16" `608 
V L "bits" 1 856 "int8" `609 
F B "spi_xfer" 1 856 "int16(int8 stream,int16 data,int8 bits)" `606 
F N "spi_xfer" 1 857 ""
V L "stream" 1 857 "int8" `611 
V L "data" 1 857 "int32" `612 
V L "bits" 1 857 "int8" `613 
F B "spi_xfer" 1 857 "int32(int8 stream,int32 data,int8 bits)" `610 
F N "spi_init" 1 858 ""
V L "baud" 1 858 "int32" `615 
F B "spi_init" 1 858 "void(int32 baud)" `614 
F N "spi_init" 1 859 ""
V L "stream" 1 859 "int8" `617 
V L "baud" 1 859 "int32" `618 
F B "spi_init" 1 859 "void(int8 stream,int32 baud)" `616 
F N "spi_speed" 1 860 ""
V L "baud" 1 860 "int32" `620 
F B "spi_speed" 1 860 "void(int32 baud)" `619 
F N "spi_speed" 1 861 ""
V L "stream" 1 861 "int8" `622 
V L "baud" 1 861 "int32" `623 
F B "spi_speed" 1 861 "void(int8 stream,int32 baud)" `621 
F N "spi_speed" 1 862 ""
V L "stream" 1 862 "int8" `625 
V L "baud" 1 862 "int32" `626 
V L "clock" 1 862 "int32" `627 
F B "spi_speed" 1 862 "void(int8 stream,int32 baud,int32 clock)" `624 
F N "spi_prewrite" 1 863 ""
V L "data" 1 863 "int8" `629 
F B "spi_prewrite" 1 863 "void(int8 data)" `628 
F N "spi_prewrite" 1 864 ""
V L "data" 1 864 "int16" `631 
F B "spi_prewrite" 1 864 "void(int16 data)" `630 
F N "spi_prewrite" 1 865 ""
V L "data" 1 865 "int32" `633 
F B "spi_prewrite" 1 865 "void(int32 data)" `632 
F N "spi_prewrite" 1 866 ""
V L "??65535" 1 866 "int8" `635 
V L "data" 1 866 "int8" `636 
F B "spi_prewrite" 1 866 "void(int8 ,int8 data)" `634 
F N "spi_prewrite" 1 867 ""
V L "??65535" 1 867 "int8" `638 
V L "data" 1 867 "int16" `639 
F B "spi_prewrite" 1 867 "void(int8 ,int16 data)" `637 
F N "spi_prewrite" 1 868 ""
V L "??65535" 1 868 "int8" `641 
V L "data" 1 868 "int32" `642 
F B "spi_prewrite" 1 868 "void(int8 ,int32 data)" `640 
F N "spi_xfer_in" 1 869 ""
F B "spi_xfer_in" 1 869 "int8()" `643 
F N "spi_xfer_in" 1 870 ""
f G "spi_xfer_in" 1 870 "int16(int8 bits)" `644 
F N "spi_xfer_in" 1 871 ""
f G "spi_xfer_in" 1 871 "int32(int8 bits)" `644 
F N "spi_xfer_in" 1 872 ""
V L "bits" 1 872 "int8" `645 
F B "spi_xfer_in" 1 872 "int8(int8 bits)" `644 
F N "spi_xfer_in" 1 873 ""
V L "bits" 1 873 "int8" `647 
f G "spi_xfer_in" 1 873 "int16(int8 bits,int8 bits)" `646 
F N "spi_xfer_in" 1 874 ""
V L "bits" 1 874 "int8" `647 
f G "spi_xfer_in" 1 874 "int32(int8 bits,int8 bits)" `646 
F N "spi_xfer_in" 1 875 ""
V L "stream" 1 875 "int8" `647 
V L "bits" 1 875 "int8" `648 
F B "spi_xfer_in" 1 875 "int8(int8 stream,int8 bits)" `646 
F N "spi_xfer_in" 1 876 ""
V L "stream" 1 876 "int8" `647 
V L "bits" 1 876 "int8" `651 
f G "spi_xfer_in" 1 876 "int16(int8 stream,int8 bits,int16 count)" `649 
F N "spi_xfer_in" 1 877 ""
V L "stream" 1 877 "int8" `647 
V L "bits" 1 877 "int8" `651 
f G "spi_xfer_in" 1 877 "int32(int8 stream,int8 bits,int16 count)" `649 
F N "spi_transfer" 1 878 ""
V L "wData" 1 878 "*int8" `650 
V L "rData" 1 878 "*int8" `651 
V L "count" 1 878 "int16" `652 
F B "spi_transfer" 1 878 "void(*int8 wData,*int8 rData,int16 count)" `649 
F N "spi_transfer" 1 879 ""
V L "stream" 1 879 "int8" `654 
V L "wData" 1 879 "*int8" `655 
V L "rData" 1 879 "*int8" `656 
V L "count" 1 879 "int16" `657 
F B "spi_transfer" 1 879 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `653 
F N "spi_transfer_write" 1 880 ""
V L "wData" 1 880 "*int8" `659 
V L "count" 1 880 "int16" `660 
F B "spi_transfer_write" 1 880 "void(*int8 wData,int16 count)" `658 
F N "spi_transfer_write" 1 881 ""
V L "stream" 1 881 "int8" `662 
V L "wData" 1 881 "*int8" `663 
V L "count" 1 881 "int16" `664 
F B "spi_transfer_write" 1 881 "void(int8 stream,*int8 wData,int16 count)" `661 
F N "spi_transfer_read" 1 882 ""
V L "rData" 1 882 "*int8" `666 
V L "count" 1 882 "int16" `667 
F B "spi_transfer_read" 1 882 "void(*int8 rData,int16 count)" `665 
F N "spi_transfer_read" 1 883 ""
V L "stream" 1 883 "int8" `669 
V L "rData" 1 883 "*int8" `670 
V L "count" 1 883 "int16" `671 
F B "spi_transfer_read" 1 883 "void(int8 stream,*int8 rData,int16 count)" `668  "#use rtos() Prototypes:"
F N "rtos_run" 1 886 ""
F B "rtos_run" 1 886 "void()" `672 
F N "rtos_yield" 1 887 ""
F B "rtos_yield" 1 887 "void()" `673 
F N "rtos_enable" 1 888 ""
V L "task" 1 888 "int8" `675 
F B "rtos_enable" 1 888 "void(int8 task)" `674 
F N "rtos_disable" 1 889 ""
V L "task" 1 889 "int8" `677 
F B "rtos_disable" 1 889 "void(int8 task)" `676 
F N "rtos_terminate" 1 890 ""
F B "rtos_terminate" 1 890 "void()" `678 
F N "rtos_await" 1 891 ""
V L "flag" 1 891 "int8" `680 
F B "rtos_await" 1 891 "void(int8 flag)" `679 
F N "rtos_wait" 1 892 ""
V L "sem" 1 892 "int8" `682 
F B "rtos_wait" 1 892 "void(int8 sem)" `681 
F N "rtos_signal" 1 893 ""
V L "sem" 1 893 "int8" `684 
F B "rtos_signal" 1 893 "void(int8 sem)" `683 
F N "rtos_msg_send" 1 894 ""
V L "task" 1 894 "int8" `686 
V L "msg" 1 894 "int8" `687 
F B "rtos_msg_send" 1 894 "void(int8 task,int8 msg)" `685 
F N "rtos_msg_read" 1 895 ""
F B "rtos_msg_read" 1 895 "int8()" `688 
F N "rtos_msg_poll" 1 896 ""
F B "rtos_msg_poll" 1 896 "int8()" `689 
F N "rtos_overrun" 1 897 ""
V L "task" 1 897 "int8" `691 
F B "rtos_overrun" 1 897 "int8(int8 task)" `690 
F N "rtos_stats" 1 898 ""
V L "task" 1 898 "int8" `693 
V L "stat" 1 898 "*int8" `694 
F B "rtos_stats" 1 898 "void(int8 task,*int8 stat)" `692  "#use timer() Prototypes:"
F N "get_ticks" 1 901 ""
F B "get_ticks" 1 901 "int8()" `695 
F N "get_ticks" 1 902 ""
f G "get_ticks" 1 902 "int16(int8 stream)" `696 
F N "get_ticks" 1 903 ""
f G "get_ticks" 1 903 "int32(int8 stream)" `696 
F N "get_ticks" 1 904 ""
V L "stream" 1 904 "int8" `697 
F B "get_ticks" 1 904 "int8(int8 stream)" `696 
F N "get_ticks" 1 905 ""
V L "stream" 1 905 "int8" `699 
f G "get_ticks" 1 905 "int16(int8 stream)" `698 
F N "get_ticks" 1 906 ""
V L "stream" 1 906 "int8" `699 
f G "get_ticks" 1 906 "int32(int8 stream)" `698 
F N "set_ticks" 1 907 ""
V L "value" 1 907 "int8" `699 
F B "set_ticks" 1 907 "void(int8 value)" `698 
F N "set_ticks" 1 908 ""
V L "value" 1 908 "int16" `701 
F B "set_ticks" 1 908 "void(int16 value)" `700 
F N "set_ticks" 1 909 ""
V L "value" 1 909 "int32" `703 
F B "set_ticks" 1 909 "void(int32 value)" `702 
F N "set_ticks" 1 910 ""
V L "stream" 1 910 "int8" `705 
V L "value" 1 910 "int8" `706 
F B "set_ticks" 1 910 "void(int8 stream,int8 value)" `704 
F N "set_ticks" 1 911 ""
V L "stream" 1 911 "int8" `708 
V L "value" 1 911 "int16" `709 
F B "set_ticks" 1 911 "void(int8 stream,int16 value)" `707 
F N "set_ticks" 1 912 ""
V L "stream" 1 912 "int8" `711 
V L "value" 1 912 "int32" `712 
F B "set_ticks" 1 912 "void(int8 stream,int32 value)" `710  "#use pwm() Prototypes:"
F N "pwm_on" 1 915 ""
F B "pwm_on" 1 915 "void()" `713 
F N "pwm_on" 1 916 ""
V L "stream" 1 916 "int8" `715 
F B "pwm_on" 1 916 "void(int8 stream)" `714 
F N "pwm_off" 1 917 ""
F B "pwm_off" 1 917 "void()" `716 
F N "pwm_off" 1 918 ""
V L "stream" 1 918 "int8" `718 
F B "pwm_off" 1 918 "void(int8 stream)" `717 
F N "pwm_set_duty" 1 919 ""
V L "duty" 1 919 "int16" `720 
F B "pwm_set_duty" 1 919 "void(int16 duty)" `719 
F N "pwm_set_duty" 1 920 ""
V L "stream" 1 920 "int8" `722 
V L "duty" 1 920 "int16" `723 
F B "pwm_set_duty" 1 920 "void(int8 stream,int16 duty)" `721 
F N "pwm_set_duty_percent" 1 921 ""
V L "percent" 1 921 "int16" `725 
F B "pwm_set_duty_percent" 1 921 "void(int16 percent)" `724 
F N "pwm_set_duty_percent" 1 922 ""
V L "stream" 1 922 "int8" `727 
V L "percent" 1 922 "int16" `728 
F B "pwm_set_duty_percent" 1 922 "void(int8 stream,int16 percent)" `726 
F N "pwm_set_frequency" 1 923 ""
V L "frequency" 1 923 "int32" `730 
F B "pwm_set_frequency" 1 923 "void(int32 frequency)" `729 
F N "pwm_set_frequency" 1 924 ""
V L "stream" 1 924 "int8" `732 
V L "frequency" 1 924 "int32" `733 
F B "pwm_set_frequency" 1 924 "void(int8 stream,int32 frequency)" `731 
F N "pwm_get_duty_period" 1 925 ""
F B "pwm_get_duty_period" 1 925 "int16()" `734 
F N "pwm_get_duty_period" 1 926 ""
V L "stream" 1 926 "int8" `736 
F B "pwm_get_duty_period" 1 926 "int16(int8 stream)" `735  "#use capture() Prototypes:"
F N "get_capture_time" 1 929 ""
F B "get_capture_time" 1 929 "int16()" `737 
F N "get_capture_time" 1 930 ""
V L "stream" 1 930 "int8" `739 
F B "get_capture_time" 1 930 "int16(int8 stream)" `738 
F N "get_capture_event" 1 931 ""
F B "get_capture_event" 1 931 "int8()" `740 
F N "get_capture_event" 1 932 ""
V L "stream" 1 932 "int8" `742 
F B "get_capture_event" 1 932 "int8(int8 stream)" `741  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
F N "goto_address" 1 945 ""
V L "address" 1 945 "int32" `744 
F B "goto_address" 1 945 "void(int32 address)" `743 
F N "label_address" 1 946 ""
V L "label" 1 946 "int32" `746 
F B "label_address" 1 946 "int32(int32 label)" `745  "Program Memory Read Prototypes:"
F N "read_program_memory" 1 949 ""
V L "address" 1 949 "int32" `748 
V L "DataPtr" 1 949 "*int8" `749 
V L "count" 1 949 "int16" `750 
F B "read_program_memory" 1 949 "void(int32 address,*int8 DataPtr,int16 count)" `747 
F N "read_program_eeprom" 1 950 ""
V L "address" 1 950 "int32" `752 
F B "read_program_eeprom" 1 950 "int16(int32 address)" `751  "Program Memory Write Prototypes:"
F N "write_program_memory" 1 953 ""
V L "address" 1 953 "int32" `754 
V L "DataPtr" 1 953 "*int8" `755 
V L "count" 1 953 "int16" `756 
F B "write_program_memory" 1 953 "void(int32 address,*int8 DataPtr,int16 count)" `753 
F N "write_program_eeprom" 1 954 ""
V L "address" 1 954 "int32" `758 
V L "data" 1 954 "int16" `759 
F B "write_program_eeprom" 1 954 "void(int32 address,int16 data)" `757  "EEPROM Prototypes:"
D G "__EEADDRESS__" 1 959 "unsigned int16"
F N "read_eeprom" 1 964 ""
V L "address" 1 964 "int16" `761 
F B "read_eeprom" 1 964 "int8(int16 address)" `760 
F N "write_eeprom" 1 965 ""
V L "address" 1 965 "int16" `763 
V L "value" 1 965 "int8" `764 
F B "write_eeprom" 1 965 "void(int16 address,int8 value)" `762  "#use touchpad() Prototypes:"
F N "touchpad_state" 1 968 ""
V L "state" 1 968 "int8" `766 
F B "touchpad_state" 1 968 "void(int8 state)" `765 
F N "touchpad_getc" 1 969 ""
F B "touchpad_getc" 1 969 "int8()" `767 
F N "touchpad_hit" 1 970 ""
F B "touchpad_hit" 1 970 "int8()" `768  "INT"
c L "touchpad_hit" 1 1 4 "FUNCTION"
F N "enable_interrupts" 1 976 ""
V L "interrupt" 1 976 "int32" `770 
F B "enable_interrupts" 1 976 "void(int32 interrupt)" `769 
F N "disable_interrupts" 1 977 ""
V L "interrupt" 1 977 "int32" `772 
F B "disable_interrupts" 1 977 "void(int32 interrupt)" `771 
F N "clear_interrupt" 1 978 ""
V L "interrupt" 1 978 "int32" `774 
F B "clear_interrupt" 1 978 "void(int32 interrupt)" `773 
F N "interrupt_active" 1 979 ""
V L "interrupt" 1 979 "int32" `776 
F B "interrupt_active" 1 979 "int8(int32 interrupt)" `775 
F N "interrupt_enabled" 1 980 ""
V L "interrupt" 1 980 "int32" `778 
F B "interrupt_enabled" 1 980 "int8(int32 interrupt)" `777 
F N "ext_int_edge" 1 981 ""
V L "source" 1 981 "int8" `780 
V L "edge" 1 981 "int8" `781 
F B "ext_int_edge" 1 981 "void(int8 source,int8 edge)" `779 
F N "jump_to_isr" 1 982 ""
V L "address" 1 982 "int16" `783 
F B "jump_to_isr" 1 982 "void(int16 address)" `782  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 1 984 "0x40"
D G "H_TO_L" 1 985 "0"
D G "GLOBAL" 1 987 "0xF2C0"
D G "PERIPH" 1 988 "0xF240"
D G "INT_RTCC" 1 989 "0x00F220"
D G "INT_TIMER0" 1 990 "0x00F220"
D G "INT_TIMER1" 1 991 "0x009D01"
D G "INT_TIMER2" 1 992 "0x009D02"
D G "INT_TIMER3" 1 993 "0x00A002"
D G "INT_EXT_L2H" 1 994 "0x5000F210"
D G "INT_EXT_H2L" 1 995 "0x6000F210"
D G "INT_EXT" 1 996 "0x00F210"
D G "INT_EXT1_L2H" 1 997 "0x5001F008"
D G "INT_EXT1_H2L" 1 998 "0x6001F008"
D G "INT_EXT1" 1 999 "0x00F008"
D G "INT_EXT2_L2H" 1 1000 "0x5002F010"
D G "INT_EXT2_H2L" 1 1001 "0x6002F010"
D G "INT_EXT2" 1 1002 "0x00F010"
D G "INT_RB" 1 1003 "0x01FFF208"
D G "INT_AD" 1 1004 "0x009D40"
D G "INT_RDA" 1 1005 "0x009D20"
D G "INT_TBE" 1 1006 "0x009D10"
D G "INT_SSP" 1 1007 "0x009D08"
D G "INT_CCP1" 1 1008 "0x009D04"
D G "INT_CCP2" 1 1009 "0x00A001"
D G "INT_BUSCOL" 1 1010 "0x00A008"
D G "INT_COMP" 1 1011 "0x00A040"
D G "INT_EEPROM" 1 1012 "0x00A010"
D G "INT_TBE2" 1 1013 "0x00A310"
D G "INT_RDA2" 1 1014 "0x00A320"
D G "INT_OSCF" 1 1015 "0x00A080"
D G "INT_HLVD" 1 1016 "0x00A004"
D G "INT_BUSCOL2" 1 1017 "0x00A340"
D G "INT_COMP2" 1 1018 "0x00A020"
D G "INT_SSP2" 1 1019 "0x00A380"
D G "INT_TIMER4" 1 1020 "0x007D01"
D G "INT_TIMER5" 1 1021 "0x007D02"
D G "INT_TIMER6" 1 1022 "0x007D04"
D G "INT_CCP3" 1 1023 "0x007A01"
D G "INT_CCP4" 1 1024 "0x007A02"
D G "INT_CCP5" 1 1025 "0x007A04"
D G "INT_TMR1G" 1 1026 "0x00A301"
D G "INT_TMR3G" 1 1027 "0x00A302"
D G "INT_TMR5G" 1 1028 "0x00A304"
D G "INT_CTMU" 1 1029 "0x00A308"
D G "INT_RB4" 1 1030 "0x110F208"
D G "INT_RB5" 1 1031 "0x120F208"
D G "INT_RB6" 1 1032 "0x140F208"
D G "INT_RB7" 1 1033 "0x180F208"
C L "jump_to_isr" 0 5 2 "FUNCTION"
V G "ADRES" 0 12 "*int16" `791 
C L "jump_to_isr" 0 5 1 "FUNCTION"
C L "jump_to_isr" 0 5 4 "FUNCTION"
F N "main" 0 41 ""
F G "main" 0 42 "void()" `805 
C L "main" 0 5 1 "FUNCTION"
C L "main" 0 5 1 "FUNCTION"
C L "main" 0 5 1 "FUNCTION"
V L "ADC" 0 59 "int16" `808 
C L "main" 0 5 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_e" 1 0
F B "port_b_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
